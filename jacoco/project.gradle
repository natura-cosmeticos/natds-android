apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.7'
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    tasks.register("allDebugCoverage", JacocoReport) {

        group = "Reporting"
        description = "Generate overall Jacoco coverage report for the debug build."

        reports {
            html.required.set(true)
            xml.required.set(true)
        }

        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                'androidx/**/*.*',
                '**/*$ViewInjector*.*',
                '**/*Dagger*.*',
                '**/*MembersInjector*.*',
                '**/*_Factory.*',
                '**/*_Provide*Factory*.*',
                '**/*_ViewBinding*.*',
                '**/AutoValue_*.*',
                '**/R2.class',
                '**/R2$*.class',
                '**/*Directions$*',
                '**/*Directions.*',
                '**/*Binding.*'
        ]

        def javaClasses = subprojects.collect { proj ->
            fileTree(dir: "${proj.buildDir}/intermediates/javac/debug/classes", excludes: excludes)
        }

        def kotlinClasses = subprojects.collect { proj ->
            fileTree(dir: "${proj.buildDir}/tmp/kotlin-classes/debug", excludes: excludes)
        }

        classDirectories.from = files(javaClasses + kotlinClasses)

        def sources = subprojects.collect { proj ->
            ["${proj.projectDir}/src/main/java", "${proj.projectDir}/src/main/kotlin",
             "${proj.projectDir}/src/debug/java", "${proj.projectDir}/src/debug/kotlin"]
        }.flatten()

        sourceDirectories.from = files(sources)

        def executions = subprojects.collect { proj ->
            file("${proj.buildDir}/jacoco/testDebugUnitTest.exec")
        }.findAll { it.exists() }

        executionData.from = files(executions)
    }
}